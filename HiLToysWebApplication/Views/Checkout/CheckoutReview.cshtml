@using System.Collections;
@using System.Collections.Generic;
@using Newtonsoft.Json;
@model HiLToysViewModel.OrderViewModel
@{
    ViewBag.Title = "Order Entry Detail";

    ArrayList orderDetails = new ArrayList();

    foreach (var item in Model.OrderDetailProductResults)
    {
        var orderDetail = new
        {
            ProductID = item.ProductID,
            ProductName = item.ProductName,
            Quantity = item.Quantity,
            UnitPrice = item.UnitPrice,
            QuantityPerUnit = item.QuantityPerUnit,
            Discount = item.Discount



        };

        orderDetails.Add(orderDetail);
    }


}

<h4>Order Entry Detail</h4>

<div style="float:left; width:150px; height:25px; text-align:right;" class="field-label">Order Number:&nbsp;</div>
<div style="float:left; width:150px; height:25px; font-weight:bold; ">&nbsp;@Model.OrderDetailProductResults[0].OrderID</div>
<div style="float:left; width:150px; height:25px; text-align:right; " class="field-label">Customer ID:&nbsp;</div>
<div style="float:left; width:150px; height:25px; ">&nbsp;@Model.OrderDetailProductResults[0].CustomerID</div>

<div style="clear:both;"></div>

<div style="float:left; width:150px; text-align:right; height:25px;" class="field-label">Order Date:&nbsp;</div>
<div style="float:left; width:150px; height:25px; ">&nbsp;@Model.OrderDetailProductResults[0].OrderDate.ToShortDateString()</div>
<div style="float:left; width:150px; height:25px; text-align:right;" class="field-label">First Name:&nbsp;</div>
<div style="float:left; height:25px; ">&nbsp;@Model.OrderDetailProductResults[0].FirstName</div>
<div style="float:left; width:150px; height:25px; text-align:right;" class="field-label">Last Name:&nbsp;</div>
<div style="float:left; height:25px; ">&nbsp;@Model.OrderDetailProductResults[0].LastName</div>

<div style="clear:both;"></div>

<!--====== Container ======-->
<table border="0" cellpadding="0" cellspacing="0" style="width:100%">
    <tr class="DataGridHeader">
        <td style="width:10%; height:25px">Product ID</td>
        <td style="width:30%">Product Description</td>
        <td style="width:10%">Quantity</td>
        <td style="width:10%">Unit Price</td>
        <td style="width:15%">UOM</td>
        <td style="width:10%">Discount</td>
    </tr>
    <tbody data-bind='template: {name: "OrderDetailTemplate", foreach: LineItems}'> </tbody>
   
</table>

<div id="OrderDetailsData" style="visibility: hidden; display: none">
    @Html.Raw(Json.Encode(orderDetails));
</div>

@Html.Hidden("OrderID", Model.OrderDetailProductResults[0].OrderID)

<!--====== Template ======-->
<script type="text/html" id="OrderDetailTemplate">

    <tr data-bind="style: { background: viewModel.SetBackgroundColor($data) }">

        <td style="height:25px"><div data-bind="text: ProductID"></div></td>
        <td><div data-bind="text: ProductName "></div></td>
        <td>
            <div data-bind="text: Quantity, visible: DisplayMode "></div>
            <div data-bind="visible: EditMode">
                <input type="text" data-bind="value: Quantity" style="width: 50px" />
            </div>
        </td>

        <td><div data-bind="text: UnitPrice"></div></td>
        <td><div data-bind="text: QuantityPerUnit "></div></td>
        <td>
            <div data-bind="text: Discount, visible: DisplayMode "></div>
            <div data-bind="visible: EditMode">
                <input type="text" data-bind="value: Discount" style="width:50px" />
            </div>
        </td>

    </tr>

</script>
<fieldset>
    <table cellpadding="0" cellspacing="0" style="width:80%">
        <tr>
            <td style="width: 30%;">
                <div style=" text-align: left;" class="field-label">Ship To Name:&nbsp;<strong> @Model.Order.ShipName</strong></div>
                <div style=" text-align:left;" class="field-label">Ship To Address:&nbsp;<strong> @Model.Order.ShipAddress</strong></div>
                <div style=" text-align:left;" class="field-label">Ship To City:&nbsp;<strong> @Model.Order.ShipCity</strong></div>
                <div style=" text-align:left;" class="field-label">Ship To Region:&nbsp;<strong> @Model.Order.ShipRegion</strong></div>
                <div style=" text-align:left;" class="field-label">Ship To Postal Code:&nbsp;<strong> @Model.Order.ShipPostalCode</strong></div>
                <div style=" text-align:left;" class="field-label">Ship To Country:&nbsp;<strong> @Model.Order.ShipCountry</strong></div>
                       
            </td>

            <td style="width: 30%;color:red">
                <div style="text-align: left;" class="field-label">Order Total(PayPal):&nbsp;<strong> @Model.Order.OrderTotal</strong></div>
                <div style="text-align: left;" class="field-label">Total Order(Cart):&nbsp;<strong> @Model.TotalOrders</strong></div>
            </td>
        </tr>
        <tr>
            <td style="width: 35%;"></td>
            <td style="width: 35%;">
                @using (Html.BeginForm("CheckoutComplete", "Checkout", FormMethod.Get, new { @class = "form-horizontal", role = "form" }))
                {

                    <div class="form-group">
                        <input type="submit" value="Confirm" class="btn btn-default" />
                    </div>

                }
            </td>
        </tr>

    </table>
</fieldset>


@Html.Hidden("CustomerID", @Model.Customer.CustomerID)
@Html.Hidden("OrderID", @Model.Order.OrderID)
@Html.Hidden("OriginalShipName", @Model.Order.ShipName, new Dictionary<string, object> { { "data-bind", "value: OriginalShipName" } })
@Html.Hidden("OriginalShipAddress", @Model.Order.ShipAddress, new Dictionary<string, object> { { "data-bind", "value: OriginalShipAddress" } })
@Html.Hidden("OriginalShipCity", @Model.Order.ShipCity, new Dictionary<string, object> { { "data-bind", "value: OriginalShipCity" } })
@Html.Hidden("OriginalShipRegion", @Model.Order.ShipRegion, new Dictionary<string, object> { { "data-bind", "value: OriginalShipRegion" } })
@Html.Hidden("OriginalShipPostalCode", @Model.Order.ShipPostalCode, new Dictionary<string, object> { { "data-bind", "value: OriginalShipPostalCode" } })
@Html.Hidden("OriginalShipCountry", @Model.Order.ShipCountry, new Dictionary<string, object> { { "data-bind", "value: OriginalShipCountry" } })
@Html.Hidden("OriginalRequiredDate", @Model.Order.RequiredDate.ToShortDateString(), new Dictionary<string, object> { { "data-bind", "value: OriginalRequiredDate" } })
@Html.Hidden("OriginalShipVia", @Model.Order.ShipVia, new Dictionary<string, object> { { "data-bind", "value: OriginalShipVia" } })
@Html.Hidden("ShipperName", @Model.Order.ShipperName)



<div id="MessageBox" data-bind="html: MessageBox"></div>



<div id="cart-status">

</div>

@section scripts{
    <script src="~/Scripts/knockout-3.1.0.js"></script>
    <script src="~/Scripts/knockout.mapping-latest.js"></script>
    <script>

        var initialLineItems = "";

        var counter = 0;
        var lineItemDisplay = function () {

            this.ProductID;
            this.ProductName;
            this.Quantity;
            this.UnitPrice;
            this.QuantityPerUnit;
            this.Discount;
            // this.OriginalQuantity;
            // this.OriginalDiscount;
            this.EditMode;
            this.DisplayMode;
            //this.ReadOnlyMode;
            this.DisplayDeleteEditButtons;
            this.DisplayCancelSaveButtons;
        };

        // Overall viewmodel for this screen, along with initial state
        var viewModel = {

            LineItems: ko.observableArray(),
            EditFields: ko.observable(false),
            MessageBox: ko.observable(),
            SetBackgroundColor: function (currentLineItemData) {
                var rowIndex = this.LineItems.indexOf(currentLineItemData);
                var colorCode = rowIndex % 2 == 0 ? "White" : "WhiteSmoke";
                return colorCode;
            },
            IntializeLineItem: function (datajsn) {
                IntializeLineItem(datajsn);
            },
            OrderID: ko.observable($("#OrderID").val()),
            BindUIwithViewModel: function (viewModel) {
                ko.applyBindings(viewModel);
            }

        };

        function IntializeLineItem(viewModeljson) {

            initialLineItems = viewModeljson;
            for (i = 0; i < initialLineItems.length; i++) {
                var newLineItem = CreateLineItem(initialLineItems[i]);
                viewModel.LineItems.push(newLineItem);

            }
        }


        function CreateLineItem(LineItem) {

            var lineItem = new lineItemDisplay();

            lineItem.ProductID = ko.observable(LineItem.ProductID);
            lineItem.ProductName = ko.observable(LineItem.ProductName);
            lineItem.Quantity = ko.observable(LineItem.Quantity);
            lineItem.UnitPrice = ko.observable(LineItem.UnitPrice);
            lineItem.QuantityPerUnit = ko.observable(LineItem.QuantityPerUnit);
            lineItem.Discount = ko.observable(LineItem.Discount);
            lineItem.BackgroundColor = ko.observable(LineItem.BackgroundColor);
            lineItem.EditMode = ko.observable(false);
            lineItem.DisplayMode = ko.observable(true);
            lineItem.DisplayDeleteEditButtons = ko.observable(true);
            lineItem.DisplayCancelSaveButtons = ko.observable(false);

            return lineItem;

        }



        function LineItem() {
            this.OrderID;
            this.ProductID;
            this.Quantity;
            this.Discount;
            this.RowIndex;
        }



        function CheckoutConfirm() {
            $("#CheckoutConfirm").submit();
        }


        function GetCartCountComplete(results) {
            counter = results.TotalCatCount;

            $('#cart-status').text('Cart (' + counter + ')');
        }
        function InitialiceCart() {

            var InitialiceCartCount = 0;
            var url = "/Carts/GetCartCount";

            $.post(url, InitialiceCartCount, function (results, textStatus) {
                GetCartCountComplete(results);
            });

            //viewModel.RegisterUIEventHandlers();
            viewModel.BindUIwithViewModel(viewModel);
            //viewModel.ReadOnlyMode(true);

        }
        InitialiceCart();
        viewModel.IntializeLineItem(@Html.Raw(JsonConvert.SerializeObject(orderDetails, new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })));
    </script>
}